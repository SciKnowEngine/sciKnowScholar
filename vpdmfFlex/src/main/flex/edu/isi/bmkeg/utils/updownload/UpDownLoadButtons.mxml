<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:mx="library://ns.adobe.com/flex/mx" 
		xmlns:view="edu.isi.bmkeg.digitalLibraryModule.view.*"
		initialize="clearFile()"
		width="100%">	
	<s:layout>
		<s:HorizontalLayout/>
	</s:layout>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
		
	<fx:Style>
		.inactive {
			color: #CCCCCC;
		}
		.active {
			color: #333333;
		}		
	</fx:Style>

	<fx:Script>
		<![CDATA[
			import flash.events.*;
			import flash.net.FileFilter;
			import flash.net.FileReference;
			
			import mx.collections.ArrayCollection;
				
			[Bindable]
			public var upLabel:String = "^";
			
			[Bindable]
			public var upTooltip:String = "Upload file";
			
			[Bindable]
			public var upWidth:int = 30;
			
			[Bindable]
			public var downLabel:String = "v";

			[Bindable]
			public var downTooltip:String = "Download file";

			[Bindable]
			public var downWidth:int = 30;
			
			[Bindable]
			public var clearLabel:String = "x";
			
			[Bindable]
			public var clearTooltip:String = "Clear file";
			
			[Bindable]
			public var clearWidth:int = 30;

			[Bindable]
			public var fileName:String;
			public var unloadedMessage:String = "-- No File Loaded --"; 

			public var fileData:Object;

			public var includeFolders:Boolean = false; 

			public var uploadOnly:Boolean = false;
			
			[Bindable]
			public var downloadFunction:Function = saveFile;
			
			private var file:FileReference;

			public var fileFilters:String = "";
			
			public function setFiltersFromCollection(filters:ArrayCollection=null):void {
				if(filters != null ) {	
					fileFilters = "";
					for(var i:int=0; i<filters.length; i++) {
						fileFilters += filters.getItemAt(i);						
					}
				}
			}
			
			// ~~~~~~
			// UPLOAD
			// ~~~~~~
			
			private function startLoadingFile():void
			{
				file = new FileReference();
				file.addEventListener(Event.SELECT, selectHandler);
				
				var f1:String = "";
				var f2:String = "";
				
				var ff:Array = fileFilters.split(",");
				
				for each( var f:String in ff) {
					if( f1.length > 0 ) {
						f1 += ", ";
						f2 += ";";
					}
					f1 += "*." + f; 
					f2 += "*." + f; 
				}
			
				var fileFilter:FileFilter = new FileFilter("Files: (" + f1 + ")", f2);
				file.browse([fileFilter]);

			}
			
			public function selectHandler(event:Event):void
			{
				file.removeEventListener(Event.SELECT, selectHandler);
				
				file.addEventListener(Event.COMPLETE, loadCompleteHandler);
				file.load();
				
				this.fileNameBox.styleName = 'active';
				this.fileName = file.name;
				this.clearButton.enabled = true;
			
			}
			
			private function loadCompleteHandler(event:Event):void {
				
				file.removeEventListener(Event.COMPLETE, loadCompleteHandler);
				
				var upEvent:Event = new UploadCompleteEvent(file, true);
				
				this.dispatchEvent(upEvent);
				
			}
			
			// ~~~~~~~~
			// DOWNLOAD
			// ~~~~~~~~
			public function saveFile():void {
				if( this.fileData != null ) {
					var saveFile:FileReference = new FileReference();
					saveFile.addEventListener(Event.OPEN, saveBeginHandler);
					saveFile.addEventListener(Event.COMPLETE, saveCompleteHandler);
					saveFile.addEventListener(IOErrorEvent.IO_ERROR, saveIOErrorHandler);
					saveFile.save(this.fileData, this.fileName);
				}
			}
			
			
			private function saveBeginHandler(event:Event):void
			{
				/* IT'D BE NICE TO HAVE A PROGRESS BAR HERE*/
			}
			
			private function saveCompleteHandler(event:Event):void
			{
				event.target.removeEventListener(Event.OPEN, saveBeginHandler);
				event.target.removeEventListener(Event.COMPLETE, saveCompleteHandler);
				event.target.removeEventListener(IOErrorEvent.IO_ERROR, saveIOErrorHandler);
			}
			
			private function saveIOErrorHandler(event:IOErrorEvent):void
			{
				event.target.removeEventListener(Event.COMPLETE, saveCompleteHandler);
				event.target.removeEventListener(IOErrorEvent.IO_ERROR, saveIOErrorHandler);
				
				trace("Error while trying to save:");
				trace(event);
			}
						
			// ~~~~~~~~~~~~~~~~~~~~~~~~~
			// STYLIZE THE FILE NAME BOX
			// ~~~~~~~~~~~~~~~~~~~~~~~~~
			public function loadFile(name:String, data:Object):void
			{				
				this.file = null;
				this.fileName = name;
				this.fileData = data;
				this.fileNameBox.styleName = "active";
				this.clearButton.enabled = true;
			}						
			
			public function clearFile():void
			{				
				this.file = null;
				this.fileName = unloadedMessage;
				this.fileNameBox.styleName = "inactive";
				this.clearButton.enabled = false;
				this.dispatchEvent( new ClearUpdownloadEvent(true, false) );
			}			
			
		]]>
	</fx:Script>

	<s:TextInput editable="false" id="fileNameBox" width="100%" 
				 text="{fileName}"
				 initialize="fileNameBox.styleName='inactive'"/>
	
	<s:Button id="downButton" label="{downLabel}" toolTip="{downTooltip}" width="{downWidth}" click="saveFile()"/>
	<s:Button id="upButton" label="{upLabel}" toolTip="{upTooltip}" width="{upWidth}" click="startLoadingFile()"/>		
	<s:Button id="clearButton" label="{clearLabel}" toolTip="{clearTooltip}" width="{clearWidth}" click="clearFile()"/>		
	
</s:Group>
	
